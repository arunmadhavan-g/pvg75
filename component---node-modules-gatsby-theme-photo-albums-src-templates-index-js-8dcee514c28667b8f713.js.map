{"version":3,"sources":["webpack:///./node_modules/ramda/src/match.js","webpack:///./node_modules/ramda/src/internal/_objectAssign.js","webpack:///./node_modules/ramda/src/merge.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/styles/Index.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/components/folders/Folder.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/components/folders/Folders.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/components/thumbnails/Thumbnail.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/components/thumbnails/Thumbnails.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/styles/Pager.js","webpack:///./src/gatsby-theme-photo-albums/components/pagination/PreviousPageText.js","webpack:///./src/gatsby-theme-photo-albums/components/pagination/NextPageText.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/components/pagination/Pager.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/templates/Index.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/util/photo-paths.js","webpack:///./node_modules/gatsby-theme-photo-albums/src/util/files-folders.js"],"names":["match","_curry2","rx","str","module","exports","_has","Object","assign","target","TypeError","output","idx","length","arguments","source","nextKey","_objectAssign","merge","l","r","Index","children","sx","variant","Folder","path","icon","title","pathToFileTitle","className","data-testid","to","fixed","alt","Folders","folders","mapIndexed","folder","i","key","Thumbnail","imageData","Thumbnails","files","currentPage","file","getPhotoPathWithPage","url","Pager","PreviousPageText","NextPageText","numPages","getPagerUrls","prev","next","rel","data","location","pageContext","baseUrl","pathPrefix","site","compose","removePathPrefix","decodeURI","pathname","map","prop","addUrlProps","nodes","childImageSharp","photos","folderIcon","Layout","forEach","require","keys","indexedForEach","groupByProp","removeFileExtension","ensureLeadingAndTrailingSlash","groupByRelativeDirectory","pageNumber","matches","appendPageNumberToUrl","getPhotoPathsWithPages","photosPerPage","fileData","photoPaths","groupedFiles","relativeDirectory","previousUrl","previousUrlWithPage","Math","ceil","nextUrl","parentUrl","curry","filter","prependBaseUrl","getChildPaths","currentPath","paths","isParentDirectoryOf","parent","child","regex","RegExp","filesOrDirectories","fileOrDirectory","relativePath","getPagerData","filesPerPage","pagerData","childCount","Array","from","_","push","limit","skip"],"mappings":"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","file":"component---node-modules-gatsby-theme-photo-albums-src-templates-index-js-8dcee514c28667b8f713.js","sourcesContent":["var _curry2 = /*#__PURE__*/require(\"./internal/_curry2\");\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\n\n\nvar match = /*#__PURE__*/_curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\n\nmodule.exports = match;","var _has = /*#__PURE__*/require(\"./_has\"); // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n\n  while (idx < length) {\n    var source = arguments[idx];\n\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n\n    idx += 1;\n  }\n\n  return output;\n}\n\nmodule.exports = typeof Object.assign === 'function' ? Object.assign : _objectAssign;","var _objectAssign = /*#__PURE__*/require(\"./internal/_objectAssign\");\n\nvar _curry2 = /*#__PURE__*/require(\"./internal/_curry2\");\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @deprecated since v0.26.0\n * @example\n *\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const withDefaults = R.merge({x: 0, y: 0});\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\n * @symb R.merge(a, b) = {...a, ...b}\n */\n\n\nvar merge = /*#__PURE__*/_curry2(function merge(l, r) {\n  return _objectAssign({}, l, r);\n});\n\nmodule.exports = merge;","/** @jsx jsx */\nimport { jsx } from 'theme-ui'\nimport PropTypes from 'prop-types'\n\nconst Index = ({children}) => \n  <div sx={{variant: 'indexPage'}}>\n    {children}\n  </div>\n\nIndex.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired\n}\n\nexport default Index","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'gatsby'\nimport Img from 'gatsby-image'\nimport {pathToFileTitle} from '../../util/url-text'\n\nconst Folder = ({path, icon}) => {\n  const title = pathToFileTitle(path)\n  return (\n    <article className='folder' data-testid='folder'>\n      <Link to={path}>\n        <Img fixed={icon} alt={title} title={title} />\n        <div className='folder-title'>{title}</div>\n      </Link>\n    </article>\n  )\n}\n\nFolder.propTypes = {\n  path: PropTypes.string.isRequired,\n  icon: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }).isRequired\n}\n\nexport default Folder","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Folder from './Folder'\nimport {mapIndexed} from '../../util/ramda-utils'\n\nconst Folders = ({folders, icon}) => {\n  return mapIndexed((folder, i) => \n    <Folder key={i} path={folder} icon={icon} />\n  )(folders)\n}\n\nFolders.propTypes = {\n  folders: PropTypes.arrayOf(\n    PropTypes.string.isRequired, \n  ).isRequired,\n  icon: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }).isRequired\n}\n\nexport default Folders","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'gatsby'\nimport Img from 'gatsby-image'\nimport {pathToFileTitle} from '../../util/url-text'\n\nconst Thumbnail = ({path, imageData}) => {\n  const title = pathToFileTitle(path)\n  return <article className='file' data-testid='file'>\n    <Link to={path}>\n      <Img fixed={imageData} alt={title} title={title}/>\n    </Link>\n  </article>\n}\n\nThumbnail.propTypes = {\n  path: PropTypes.string.isRequired,\n  imageData: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }).isRequired  \n}\n\nexport default Thumbnail","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Thumbnail from './Thumbnail'\nimport {mapIndexed} from '../../util/ramda-utils'\nimport {getPhotoPathWithPage} from '../../util/photo-paths'\n\nconst Thumbnails = ({files, currentPage}) => {\n  return mapIndexed((file, i) => \n    <Thumbnail key={i} path={getPhotoPathWithPage(currentPage, file.url)} \n      imageData={file.imageData} />\n  )(files)\n}\n\nThumbnails.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string.isRequired,\n      imageData: PropTypes.object.isRequired,\n    }).isRequired   \n  ).isRequired\n}\n\nexport default Thumbnails","/** @jsx jsx */\nimport { jsx } from 'theme-ui'\nimport PropTypes from 'prop-types'\n\nconst Pager = ({children}) => \n  <div sx={{variant: 'layout.pager'}}>\n    {children}\n  </div>\n\nPager.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired\n}\n\nexport default Pager","import React from 'react'\n\nconst PreviousPageText = () => \n  <span className='previous-page'>\n    ←\n  </span>\n\nexport default PreviousPageText","import React from 'react'\n\nconst NextPageText = () => \n  <span className='next-page'>\n    →\n  </span>\n\nexport default NextPageText","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'gatsby'\nimport PagerStyles from '../../styles/Pager'\nimport PreviousPageText from './PreviousPageText'\nimport NextPageText from './NextPageText'\nimport {getPagerUrls} from '../../util/url-text'\n\nconst Pager = ({path, currentPage, numPages}) => {\n  const {prev, next} = getPagerUrls(path, currentPage, numPages)\n\n  return (\n    <PagerStyles>\n      {prev ? (\n        <Link to={prev} rel='prev'>\n          <PreviousPageText />\n        </Link>\n      ) : null}\n      {next ? (\n        <Link to={next} rel='next'>\n          <NextPageText />\n        </Link>\n      ) : null}\n    </PagerStyles>\n  )\n}\n\nPager.propTypes = {\n  path: PropTypes.string.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  numPages: PropTypes.number.isRequired,\n}\n\nexport default Pager","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {graphql} from 'gatsby'\nimport compose from 'ramda/src/compose'\nimport map from 'ramda/src/map'\nimport merge from 'ramda/src/merge'\nimport prop from 'ramda/src/prop'\nimport IndexStyles from '../styles/Index'\nimport Layout from '../components/layout/Layout'\nimport Folders from '../components/folders/Folders'\nimport Thumbnails from '../components/thumbnails/Thumbnails'\nimport Pager from '../components/pagination/Pager'\nimport {addUrlProps} from '../util/files-folders'\nimport {removePathPrefix} from '../util/url-text'\n\nconst Index = ({data, location, pageContext}) => {\n  const {baseUrl, currentPage, numPages} = pageContext\n  const pathPrefix = data.site.pathPrefix\n  const path = compose(\n    removePathPrefix(pathPrefix), decodeURI\n  )(location.pathname)\n  const folders = compose(\n    map(prop('url')),\n    addUrlProps(baseUrl))(data.folders.nodes)\n  const files = compose(\n    map(file => merge(file, {imageData: file.childImageSharp.fixed})),\n    addUrlProps(baseUrl))(data.photos.nodes)\n  const folderIcon = data.folderIcon.childImageSharp.fixed\n\n  return (\n    <Layout path={path}>\n      <div data-testid={path} >\n        <IndexStyles>\n          <section>\n            <Folders path={path} folders={folders} icon={folderIcon} />\n            <Thumbnails files={files} currentPage={currentPage} />\n          </section>\n        </IndexStyles>\n      </div>\n      <Pager path={path} currentPage={currentPage} numPages={numPages} />\n      <br/>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query indexQuery($skip: Int!, $limit: Int!, $relativeDirectory: String!) {\n    site {\n      pathPrefix\n    }\n    photos: allFile(\n      filter: {\n        sourceInstanceName: {eq: \"gtpaPhotos\"}, \n        relativeDirectory: {eq: $relativeDirectory}\n      }, \n      sort: {fields: relativePath} \n      limit: $limit \n      skip: $skip) {\n      nodes {\n        relativePath\n        relativeDirectory\n        childImageSharp {\n          fixed(width: 250, height: 250, cropFocus: CENTER) {\n            ...GatsbyImageSharpFixed\n          }\n        }      \n      }\n    }\n    folderIcon: file(sourceInstanceName: {eq: \"gtpaFolderIcon\"}) {\n      childImageSharp {\n        fixed(width: 250, height: 250) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    folders: allDirectory(\n      filter: {\n        sourceInstanceName: {eq: \"gtpaPhotos\"},\n        relativeDirectory: {eq: $relativeDirectory}\n      }, \n      sort: {fields: relativePath}) {\n      nodes {\n        relativePath\n        relativeDirectory\n      }\n    }\n  }\n`\n\nIndex.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired\n  }).isRequired,\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      pathPrefix: PropTypes.string.isRequired,\n    }),\n    folderIcon: PropTypes.shape({\n      childImageSharp: PropTypes.shape({\n        fixed: PropTypes.object.isRequired\n      }).isRequired       \n    }).isRequired,\n    folders: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          relativePath: PropTypes.string.isRequired,\n        }).isRequired   \n      ).isRequired\n    }).isRequired,\n    photos: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          relativePath: PropTypes.string.isRequired,\n          childImageSharp: PropTypes.shape({\n            fixed: PropTypes.object.isRequired,\n          })\n        }).isRequired   \n      ).isRequired\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    currentPage: PropTypes.number.isRequired,\n    numPages: PropTypes.number.isRequired,\n    relativeDirectory: PropTypes.string.isRequired,\n    baseUrl: PropTypes.string.isRequired,\n  }).isRequired\n}\n\nexport default Index","const forEach = require('ramda/src/forEach')\nconst keys = require('ramda/src/keys')\nconst match = require('ramda/src/match')\nconst {indexedForEach, groupByProp} = require('./ramda-utils')\nconst {removeFileExtension, ensureLeadingAndTrailingSlash} = require('./url-text')\nconst groupByRelativeDirectory = groupByProp('relativeDirectory')\n\nconst getPhotoPathsWithPages = (photosPerPage, fileData) => {\n  const photoPaths = {}\n  const groupedFiles = groupByRelativeDirectory(fileData)\n  forEach(relativeDirectory => { \n    let previousUrl = null\n    let previousUrlWithPage = null\n    return indexedForEach(\n      (file, i) => {\n        const pageNumber = Math.ceil((i + 1) / photosPerPage)\n        photoPaths[file.url] = {\n          url: getPhotoPathWithPage(pageNumber, file.url),\n          previousUrl: previousUrlWithPage,\n          nextUrl: null,\n          parentUrl: appendPageNumberToUrl(pageNumber, file.parentUrl),\n        }\n        if (previousUrl) {\n          photoPaths[previousUrl].nextUrl = photoPaths[file.url].url\n        }\n        previousUrl = file.url\n        previousUrlWithPage = photoPaths[file.url].url\n      }, \n      groupedFiles[relativeDirectory]\n    )\n  }, keys(groupedFiles))\n  return photoPaths\n}\n\nconst getPhotoPathWithPage = (pageNumber, url) => {\n  url = removeFileExtension(url)\n  const matches = match(/^(.*\\/)([^/]+)$/, url)\n  if (matches && matches[1] && matches[2]) {\n    const path =  `${matches[1]}` + (pageNumber > 1 ? `page-${pageNumber}/` : '') + matches[2]\n    return path\n  }\n  return url\n}\n\nconst appendPageNumberToUrl = (pageNumber, url) => {\n  let path = url ? url : null\n  if (path && pageNumber > 1) {\n    path = `${ensureLeadingAndTrailingSlash(path)}page-${pageNumber}`\n  }\n  return path\n}\n\nmodule.exports = {\n  getPhotoPathsWithPages, \n  getPhotoPathWithPage,\n}","const curry = require('ramda/src/curry')\nconst filter = require('ramda/src/filter')\nconst match = require('ramda/src/match')\nconst {prependBaseUrl} = require('./url-text')\n\nconst getChildPaths = curry(\n  (currentPath, paths) => {\n    return filter(isParentDirectoryOf(currentPath), paths)\n  }\n)\n\n/**\n * Determines whether a directory is a parent directory of a file or directory.\n * @param {string} parent The path of a possible parent directory. \n * @param {string} child The path of a file or directory.\n * @returns {bool}\n */\nconst isParentDirectoryOf = curry(\n  (parent, child) => {\n    const regex = new RegExp('^' + parent + '/?[^/]+$')\n    return match(regex, child).length > 0\n  }\n)\n\nconst getPagerData = (currentPath, files, filesPerPage) => {\n  const pagerData = []\n  const children = getChildPaths(currentPath, files)\n  const childCount = children.length\n  const numPages = Math.ceil(childCount / filesPerPage) || 1\n  Array.from({ length: numPages }).forEach((_, i) => {\n    pagerData.push({\n      limit: filesPerPage,\n      skip: i * filesPerPage,\n      numPages,\n      currentPage: i + 1\n    })\n  })\n  return pagerData\n}\n\n/**\n * Accepts an array of gatsby-source-filesystem objects that must have a\n * relativePath property. Adds a url property to all of the objects.\n */\nconst addUrlProps = curry((baseUrl, filesOrDirectories) => \n  filesOrDirectories.map(fileOrDirectory => ({\n    ...fileOrDirectory,\n    url: prependBaseUrl(baseUrl, fileOrDirectory.relativePath),\n    parentUrl: prependBaseUrl(baseUrl, fileOrDirectory.relativeDirectory),\n  })))\n\nmodule.exports = {\n  addUrlProps,\n  getChildPaths,\n  getPagerData,\n}"],"sourceRoot":""}